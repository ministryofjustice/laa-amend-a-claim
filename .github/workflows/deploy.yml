name: Deploy

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: 'main'
      environment:
        required: true
        type: string
      SENTRY_ENV:
        required: true
        type: string
    secrets:
      ECR_ROLE_TO_ASSUME:
        required: true
      KUBE_NAMESPACE:
        required: true
      KUBE_CLUSTER:
        required: true
      KUBE_TOKEN:
        required: true
      KUBE_CERT:
        required: true
    outputs:
      image_tag:
        description: "The image tag used for deployment"
        value: ${{ jobs.deploy.outputs.image_tag }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      image_tag: ${{ steps.get_sha.outputs.sha }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Get latest commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      - name: Authenticate to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build JAR
        run: ./gradlew build
        env:
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.get_sha.outputs.sha }}

      - name: Generate Deployment the Files
        run: |
          cat deployments/templates/deployment.yml | envsubst > deployments/deployment.yml
          cat deployments/templates/ingress.yml | envsubst > deployments/ingress.yml
          cat deployments/templates/ingress.yml | envsubst > deployments/ingress-internal.yml
          cat deployments/templates/service.yml | envsubst > deployments/service.yml
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.get_sha.outputs.sha }}
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
          SPRING_PROFILE: ${{ vars.SPRING_PROFILE }}
          INGRESS_CLASS_NAME: ${{ vars.INGRESS_CLASS_NAME }}
          SENTRY_ENV: ${{ inputs.SENTRY_ENV }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}

      - name: Deploy to Cloud Platform
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f deployments/
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}